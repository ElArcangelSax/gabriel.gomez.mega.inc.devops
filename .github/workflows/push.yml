name: golang-pipeline-deploy-GKE
on: 
   push:
    branches:
     - 'develop'
     - 'main'
    tags: 
        - 'v*'
   pull_request:
    branches:
     - 'main'   
jobs:
  deploy:    
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Extract Version
        id: version_step
        run: |
          echo "##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest"
          echo "##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$"refs/tags/v"}"
      - name: Print Version
        run: |
          echo ${{steps.version_step.outputs.latest_tag}}
          echo ${{steps.version_step.outputs.version_tag}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: PrepareReg Names
        id: read-docker-image-identifiers
        run: |
          echo LASTEST_TAG=$(echo ${{ steps.version_step.outputs.latest_tag  }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
          echo VERSION_TAG=$(echo ${{ steps.version_step.outputs.version_tag }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      - name: Check if Docker image exists
        run: |
          if docker manifest inspect ${{env.VERSION_TAG}} &> /dev/null; then
            echo "Image ${{env.VERSION_TAG}} exists."
            exit 1
          else
            echo "Image ${{env.VERSION_TAG}} does not exist."
          fi
      - name: Build and push
        if:   github.event_name == 'push' && github.ref == 'refs/heads/develop'

        id: docker_build
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ${{env.LASTEST_TAG}}
            ${{env.VERSION_TAG}}
          build-args: |
            ${{steps.version_step.outputs.version}}

  setup-build-publish-deploy:
    name: Setup, Connect, and Deploy
    runs-on: ubuntu-latest
    needs: deploy
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Extract Version
      id: version_step       
      run: |
        echo "##[set-output name=latest_tag;]$GITHUB_REPOSITORY:latest"
        echo "##[set-output name=version_tag;]$GITHUB_REPOSITORY:${GITHUB_REF#$"refs/tags/v"}"      
    - id: 'auth'
      uses: 'google-github-actions/auth@v2'  
      with:
        credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
    - id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v2'
      with:
       cluster_name: 'iac-gke-cluster'
       location: 'us-central1'
    - id: 'get-pods'
      shell: bash
      env: 
        VERSION_TAG: ${{ env.VERSION_TAG }}
      run: |
        kubectl get pods
        ls -lat 
        ls -lat ./manifest
        VERSION_TAG=$(echo ${{steps.version_step.outputs.version_tag}} | tr '[:upper:]' '[:lower:]')
        echo ".......[$VERSION_TAG]......."
        sed -i.bak "s|DOCKER_TAG|${VERSION_TAG}|g" ./manifest/replicaset.yaml && \
        kubectl apply -f ./manifest/replicaset.yaml
# 
  test:
    needs: setup-build-publish-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Test Script
        run: bash test-app.sh
        id: test_script

      - name: Test Script App
        run: |
          response_code=$(./test-app.sh | jq -r '.code')

          if [ "$response_code" -eq 200 ]; then
            echo "Test passed. Status code: $response_code"
          else
            echo "Test failed. Status code: $response_code"
            exit 1  # Fail the workflow if the test fails
          fi